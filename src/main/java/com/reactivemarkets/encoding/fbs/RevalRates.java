// automatically generated by the FlatBuffers compiler, do not modify

package com.reactivemarkets.encoding.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RevalRates extends Table {
    public static RevalRates getRootAsRevalRates(ByteBuffer _bb) {
        return getRootAsRevalRates(_bb, new RevalRates());
    }

    public static RevalRates getRootAsRevalRates(ByteBuffer _bb, RevalRates obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createRevalRates(FlatBufferBuilder builder,
                                       int idOffset,
                                       int asset_idOffset,
                                       int rateOffset) {
        builder.startObject(3);
        RevalRates.addRate(builder, rateOffset);
        RevalRates.addAssetId(builder, asset_idOffset);
        RevalRates.addId(builder, idOffset);
        return RevalRates.endRevalRates(builder);
    }

    public static void startRevalRates(FlatBufferBuilder builder) {
        builder.startObject(3);
    }

    public static void addId(FlatBufferBuilder builder, int idOffset) {
        builder.addOffset(0, idOffset, 0);
    }

    public static void addAssetId(FlatBufferBuilder builder, int assetIdOffset) {
        builder.addOffset(1, assetIdOffset, 0);
    }

    public static int createAssetIdVector(FlatBufferBuilder builder, short[] data) {
        builder.startVector(2, data.length, 2);
        for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]);
        return builder.endVector();
    }

    public static void startAssetIdVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(2, numElems, 2);
    }

    public static void addRate(FlatBufferBuilder builder, int rateOffset) {
        builder.addOffset(2, rateOffset, 0);
    }

    public static int createRateVector(FlatBufferBuilder builder, double[] data) {
        builder.startVector(8, data.length, 8);
        for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]);
        return builder.endVector();
    }

    public static void startRateVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(8, numElems, 8);
    }

    public static int endRevalRates(FlatBufferBuilder builder) {
        int o = builder.endObject();
        builder.required(o, 6);  // asset_id
        builder.required(o, 8);  // rate
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public RevalRates __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String id() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer idAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer idInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public short assetId(int j) {
        int o = __offset(6);
        return o != 0 ? bb.getShort(__vector(o) + j * 2) : 0;
    }

    public int assetIdLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer assetIdAsByteBuffer() {
        return __vector_as_bytebuffer(6, 2);
    }

    public ByteBuffer assetIdInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 2);
    }

    public double rate(int j) {
        int o = __offset(8);
        return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0;
    }

    public int rateLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer rateAsByteBuffer() {
        return __vector_as_bytebuffer(8, 8);
    }

    public ByteBuffer rateInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 8, 8);
    }
}

