// automatically generated by the FlatBuffers compiler, do not modify

package com.reactivemarkets.encoding.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PublicTrade extends Table {
    public static PublicTrade getRootAsPublicTrade(ByteBuffer _bb) {
        return getRootAsPublicTrade(_bb, new PublicTrade());
    }

    public static PublicTrade getRootAsPublicTrade(ByteBuffer _bb, PublicTrade obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createPublicTrade(FlatBufferBuilder builder,
                                        long trans_ts,
                                        int marketOffset,
                                        int idOffset,
                                        short side,
                                        double qty,
                                        double price,
                                        int exec_venueOffset) {
        builder.startObject(7);
        PublicTrade.addPrice(builder, price);
        PublicTrade.addQty(builder, qty);
        PublicTrade.addTransTs(builder, trans_ts);
        PublicTrade.addExecVenue(builder, exec_venueOffset);
        PublicTrade.addId(builder, idOffset);
        PublicTrade.addMarket(builder, marketOffset);
        PublicTrade.addSide(builder, side);
        return PublicTrade.endPublicTrade(builder);
    }

    public static void startPublicTrade(FlatBufferBuilder builder) {
        builder.startObject(7);
    }

    public static void addTransTs(FlatBufferBuilder builder, long transTs) {
        builder.addLong(0, transTs, 0L);
    }

    public static void addMarket(FlatBufferBuilder builder, int marketOffset) {
        builder.addOffset(1, marketOffset, 0);
    }

    public static void addId(FlatBufferBuilder builder, int idOffset) {
        builder.addOffset(2, idOffset, 0);
    }

    public static void addSide(FlatBufferBuilder builder, short side) {
        builder.addShort(3, side, 0);
    }

    public static void addQty(FlatBufferBuilder builder, double qty) {
        builder.addDouble(4, qty, 0.0);
    }

    public static void addPrice(FlatBufferBuilder builder, double price) {
        builder.addDouble(5, price, 0.0);
    }

    public static void addExecVenue(FlatBufferBuilder builder, int execVenueOffset) {
        builder.addOffset(6, execVenueOffset, 0);
    }

    public static int endPublicTrade(FlatBufferBuilder builder) {
        int o = builder.endObject();
        builder.required(o, 6);  // market
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public PublicTrade __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public long transTs() {
        int o = __offset(4);
        return o != 0 ? bb.getLong(o + bb_pos) : 0L;
    }

    public String market() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer marketAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public ByteBuffer marketInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 1);
    }

    public String id() {
        int o = __offset(8);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer idAsByteBuffer() {
        return __vector_as_bytebuffer(8, 1);
    }

    public ByteBuffer idInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 8, 1);
    }

    public short side() {
        int o = __offset(10);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public double qty() {
        int o = __offset(12);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double price() {
        int o = __offset(14);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public String execVenue() {
        int o = __offset(16);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer execVenueAsByteBuffer() {
        return __vector_as_bytebuffer(16, 1);
    }

    public ByteBuffer execVenueInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 16, 1);
    }
}

